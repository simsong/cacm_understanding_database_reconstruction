import cvxpy as cp
import numpy as np

# goal is to solve the problem in example_survey_responses.txt with an optimizer
# define a new fxn for every constraint, then add them all up for the obj function? (each sub function returns
# 1 if met and -1000 if not met)

#ages
a1 = cp.Int()
a2 = cp.Int()
a3 = cp.Int()
a4 = cp.Int()
a5 = cp.Int()
a6 = cp.Int()
a7 = cp.Int()
a8 = cp.Int()
a9 = cp.Int()
a10 = cp.Int()

#household indicators
hh1_1 = cp.Int()
hh1_2 = cp.Int()
hh1_3 = cp.Int()
hh1_4 = cp.Int()
hh1_5 = cp.Int()
hh1_6 = cp.Int()
hh1_7 = cp.Int()
hh1_8 = cp.Int()
hh1_9 = cp.Int()
hh1_10 = cp.Int()
hh2_1 = cp.Int()
hh2_2 = cp.Int()
hh2_3 = cp.Int()
hh2_4 = cp.Int()
hh2_5 = cp.Int()
hh2_6 = cp.Int()
hh2_7 = cp.Int()
hh2_8 = cp.Int()
hh2_9 = cp.Int()
hh2_10 = cp.Int()

#sex indicators
m1 = cp.Int()
m2 = cp.Int()
m3 = cp.Int()
m4 = cp.Int()
m5 = cp.Int()
m6 = cp.Int()
m7 = cp.Int()
m8 = cp.Int()
m9 = cp.Int()
m10 = cp.Int()
f1 = cp.Int()
f2 = cp.Int()
f3 = cp.Int()
f4 = cp.Int()
f5 = cp.Int()
f6 = cp.Int()
f7 = cp.Int()
f8 = cp.Int()
f9 = cp.Int()
f10 = cp.Int()

#race indicators
w1 = cp.Int()
w2 = cp.Int()
w3 = cp.Int()
w4 = cp.Int()
w5 = cp.Int()
w6 = cp.Int()
w7 = cp.Int()
w8 = cp.Int()
w9 = cp.Int()
w10 = cp.Int()
b1 = cp.Int()
b2 = cp.Int()
b3 = cp.Int()
b4 = cp.Int()
b5 = cp.Int()
b6 = cp.Int()
b7 = cp.Int()
b8 = cp.Int()
b9 = cp.Int()
b10 = cp.Int()

#generation indicators
c1 = cp.Int()
c2 = cp.Int()
c3 = cp.Int()
c4 = cp.Int()
c5 = cp.Int()
c6 = cp.Int()
c7 = cp.Int()
c8 = cp.Int()
c9 = cp.Int()
c10 = cp.Int()
p1 = cp.Int()
p2 = cp.Int()
p3 = cp.Int()
p4 = cp.Int()
p5 = cp.Int()
p6 = cp.Int()
p7 = cp.Int()
p8 = cp.Int()
p9 = cp.Int()
p10 = cp.Int()
g1 = cp.Int()
g2 = cp.Int()
g3 = cp.Int()
g4 = cp.Int()
g5 = cp.Int()
g6 = cp.Int()
g7 = cp.Int()
g8 = cp.Int()
g9 = cp.Int()
g10 = cp.Int()

#bucket indicators (add to as needed)

mb1 = cp.Int()
mb2 = cp.Int()
mb3 = cp.Int()
mb4 = cp.Int()
mb5 = cp.Int()
mb6 = cp.Int()
mb7 = cp.Int()
mb8 = cp.Int()
mb9 = cp.Int()
mb10 = cp.Int()
mw1 = cp.Int()
mw2 = cp.Int()
mw3 = cp.Int()
mw4 = cp.Int()
mw5 = cp.Int()
mw6 = cp.Int()
mw7 = cp.Int()
mw8 = cp.Int()
mw9 = cp.Int()
mw10 = cp.Int()
fb1 = cp.Int()
fb2 = cp.Int()
fb3 = cp.Int()
fb4 = cp.Int()
fb5 = cp.Int()
fb6 = cp.Int()
fb7 = cp.Int()
fb8 = cp.Int()
fb9 = cp.Int()
fb10 = cp.Int()
fw1 = cp.Int()
fw2 = cp.Int()
fw3 = cp.Int()
fw4 = cp.Int()
fw5 = cp.Int()
fw6 = cp.Int()
fw7 = cp.Int()
fw8 = cp.Int()
fw9 = cp.Int()
fw10 = cp.Int()


#domain constraints
constraints = []

constraints.append(a1 >= 10)
constraints.append(a1 <= 90)
constraints.append(a2 >= 10)
constraints.append(a2 <= 90)
constraints.append(a3 >= 10)
constraints.append(a3 <= 90)
constraints.append(a4 >= 10)
constraints.append(a4 <= 90)
constraints.append(a5 >= 10)
constraints.append(a5 <= 90)
constraints.append(a6 >= 10)
constraints.append(a6 <= 90)
constraints.append(a7 >= 10)
constraints.append(a7 <= 90)
constraints.append(a8 >= 10)
constraints.append(a8 <= 90)
constraints.append(a9 >= 10)
constraints.append(a9 <= 90)
constraints.append(a10 >= 10)
constraints.append(a10 <= 90)

constraints.append(hh1_1 >= 0)
constraints.append(hh1_1 <= 1)
constraints.append(hh1_2 >= 0)
constraints.append(hh1_2 <= 1)
constraints.append(hh1_3 >= 0)
constraints.append(hh1_3 <= 1)
constraints.append(hh1_4 >= 0)
constraints.append(hh1_4 <= 1)
constraints.append(hh1_5 >= 0)
constraints.append(hh1_5 <= 1)
constraints.append(hh1_6 >= 0)
constraints.append(hh1_6 <= 1)
constraints.append(hh1_7 >= 0)
constraints.append(hh1_7 <= 1)
constraints.append(hh1_8 >= 0)
constraints.append(hh1_8 <= 1)
constraints.append(hh1_9 >= 0)
constraints.append(hh1_9 <= 1)
constraints.append(hh1_10 >= 0)
constraints.append(hh1_10 <= 1)

constraints.append(hh2_1 >= 0)
constraints.append(hh2_1 <= 1)
constraints.append(hh2_2 >= 0)
constraints.append(hh2_2 <= 1)
constraints.append(hh2_3 >= 0)
constraints.append(hh2_3 <= 1)
constraints.append(hh2_4 >= 0)
constraints.append(hh2_4 <= 1)
constraints.append(hh2_5 >= 0)
constraints.append(hh2_5 <= 1)
constraints.append(hh2_6 >= 0)
constraints.append(hh2_6 <= 1)
constraints.append(hh2_7 >= 0)
constraints.append(hh2_7 <= 1)
constraints.append(hh2_8 >= 0)
constraints.append(hh2_8 <= 1)
constraints.append(hh2_9 >= 0)
constraints.append(hh2_9 <= 1)
constraints.append(hh2_10 >= 0)
constraints.append(hh2_10 <= 1)

constraints.append(m1 >= 0)
constraints.append(m1 <= 1)
constraints.append(m2 >= 0)
constraints.append(m2 <= 1)
constraints.append(m3 >= 0)
constraints.append(m3 <= 1)
constraints.append(m4 >= 0)
constraints.append(m4 <= 1)
constraints.append(m5 >= 0)
constraints.append(m5 <= 1)
constraints.append(m6 >= 0)
constraints.append(m6 <= 1)
constraints.append(m7 >= 0)
constraints.append(m7 <= 1)
constraints.append(m8 >= 0)
constraints.append(m8 <= 1)
constraints.append(m9 >= 0)
constraints.append(m9 <= 1)
constraints.append(m10 >= 0)
constraints.append(m10 <= 1)

constraints.append(f1 >= 0)
constraints.append(f1 <= 1)
constraints.append(f2 >= 0)
constraints.append(f2 <= 1)
constraints.append(f3 >= 0)
constraints.append(f3 <= 1)
constraints.append(f4 >= 0)
constraints.append(f4 <= 1)
constraints.append(f5 >= 0)
constraints.append(f5 <= 1)
constraints.append(f6 >= 0)
constraints.append(f6 <= 1)
constraints.append(f7 >= 0)
constraints.append(f7 <= 1)
constraints.append(f8 >= 0)
constraints.append(f8 <= 1)
constraints.append(f9 >= 0)
constraints.append(f9 <= 1)
constraints.append(f10 >= 0)
constraints.append(f10 <= 1)

constraints.append(w1 >= 0)
constraints.append(w1 <= 1)
constraints.append(w2 >= 0)
constraints.append(w2 <= 1)
constraints.append(w3 >= 0)
constraints.append(w3 <= 1)
constraints.append(w4 >= 0)
constraints.append(w4 <= 1)
constraints.append(w5 >= 0)
constraints.append(w5 <= 1)
constraints.append(w6 >= 0)
constraints.append(w6 <= 1)
constraints.append(w7 >= 0)
constraints.append(w7 <= 1)
constraints.append(w8 >= 0)
constraints.append(w8 <= 1)
constraints.append(w9 >= 0)
constraints.append(w9 <= 1)
constraints.append(w10 >= 0)
constraints.append(w10 <= 1)

constraints.append(b1 >= 0)
constraints.append(b1 <= 1)
constraints.append(b2 >= 0)
constraints.append(b2 <= 1)
constraints.append(b3 >= 0)
constraints.append(b3 <= 1)
constraints.append(b4 >= 0)
constraints.append(b4 <= 1)
constraints.append(b5 >= 0)
constraints.append(b5 <= 1)
constraints.append(b6 >= 0)
constraints.append(b6 <= 1)
constraints.append(b7 >= 0)
constraints.append(b7 <= 1)
constraints.append(b8 >= 0)
constraints.append(b8 <= 1)
constraints.append(b9 >= 0)
constraints.append(b9 <= 1)
constraints.append(b10 >= 0)
constraints.append(b10 <= 1)

constraints.append(c1 >= 0)
constraints.append(c1 <= 1)
constraints.append(c2 >= 0)
constraints.append(c2 <= 1)
constraints.append(c3 >= 0)
constraints.append(c3 <= 1)
constraints.append(c4 >= 0)
constraints.append(c4 <= 1)
constraints.append(c5 >= 0)
constraints.append(c5 <= 1)
constraints.append(c6 >= 0)
constraints.append(c6 <= 1)
constraints.append(c7 >= 0)
constraints.append(c7 <= 1)
constraints.append(c8 >= 0)
constraints.append(c8 <= 1)
constraints.append(c9 >= 0)
constraints.append(c9 <= 1)
constraints.append(c10 >= 0)
constraints.append(c10 <= 1)

constraints.append(p1 >= 0)
constraints.append(p1 <= 1)
constraints.append(p2 >= 0)
constraints.append(p2 <= 1)
constraints.append(p3 >= 0)
constraints.append(p3 <= 1)
constraints.append(p4 >= 0)
constraints.append(p4 <= 1)
constraints.append(p5 >= 0)
constraints.append(p5 <= 1)
constraints.append(p6 >= 0)
constraints.append(p6 <= 1)
constraints.append(p7 >= 0)
constraints.append(p7 <= 1)
constraints.append(p8 >= 0)
constraints.append(p8 <= 1)
constraints.append(p9 >= 0)
constraints.append(p9 <= 1)
constraints.append(p10 >= 0)
constraints.append(p10 <= 1)

constraints.append(g1 >= 0)
constraints.append(g1 <= 1)
constraints.append(g2 >= 0)
constraints.append(g2 <= 1)
constraints.append(g3 >= 0)
constraints.append(g3 <= 1)
constraints.append(g4 >= 0)
constraints.append(g4 <= 1)
constraints.append(g5 >= 0)
constraints.append(g5 <= 1)
constraints.append(g6 >= 0)
constraints.append(g6 <= 1)
constraints.append(g7 >= 0)
constraints.append(g7 <= 1)
constraints.append(g8 >= 0)
constraints.append(g8 <= 1)
constraints.append(g9 >= 0)
constraints.append(g9 <= 1)
constraints.append(g10 >= 0)
constraints.append(g10 <= 1)

#sum of all indicator variables for a given person must be 1 (e.g. you can't not have a sex)
constraints.append(sum(hh1_1, hh2_1) == 1)
constraints.append(sum(hh1_2, hh2_2) == 1)
constraints.append(sum(hh1_3, hh2_3) == 1)
constraints.append(sum(hh1_4, hh2_4) == 1)
constraints.append(sum(hh1_5, hh2_5) == 1)
constraints.append(sum(hh1_6, hh2_6) == 1)
constraints.append(sum(hh1_7, hh2_7) == 1)
constraints.append(sum(hh1_8, hh2_8) == 1)
constraints.append(sum(hh1_9, hh2_9) == 1)
constraints.append(sum(hh1_10, hh2_10) == 1)

constraints.append(sum(m1, f1) == 1)
constraints.append(sum(m2, f2) == 1)
constraints.append(sum(m3, f3) == 1)
constraints.append(sum(m4, f4) == 1)
constraints.append(sum(m5, f5) == 1)
constraints.append(sum(m6, f6) == 1)
constraints.append(sum(m7, f7) == 1)
constraints.append(sum(m8, f8) == 1)
constraints.append(sum(m9, f9) == 1)
constraints.append(sum(m10, f10) == 1)

constraints.append(sum(w1, b1) == 1)
constraints.append(sum(w2, b2) == 1)
constraints.append(sum(w3, b3) == 1)
constraints.append(sum(w4, b4) == 1)
constraints.append(sum(w5, b5) == 1)
constraints.append(sum(w6, b6) == 1)
constraints.append(sum(w7, b7) == 1)
constraints.append(sum(w8, b8) == 1)
constraints.append(sum(w9, b9) == 1)
constraints.append(sum(w10, b10) == 1)

constraints.append(sum(c1, p1, g1) == 1)
constraints.append(sum(c2, p2, g2) == 1)
constraints.append(sum(c3, p3, g3) == 1)
constraints.append(sum(c4, p4, g4) == 1)
constraints.append(sum(c5, p5, g5) == 1)
constraints.append(sum(c6, p6, g6) == 1)
constraints.append(sum(c7, p7, g7) == 1)
constraints.append(sum(c8, p8, g8) == 1)
constraints.append(sum(c9, p9, g9) == 1)
constraints.append(sum(c10, p10, g10) == 1)

#start adding stuff to objective function to max
scores = []

#setting up bucket variables
#gender/race
constraints.append(2*mb1 <= m1 + b1)
constraints.append(2*mw1 <= m1 + w1)
constraints.append(2*fb1 <= f1 + b1)
constraints.append(2*fw1 <= f1 + w1)
#gender/generation
constraints.append(2*mh1 <= m1 + hh1_1)
#race/generation

#household/race

#household/gender

#household/generation



scores.append(mb1)




objective = cp.Maximize(sum(scores))

prob = cp.Problem(objective, constraints)
prob.solve()
print "status:", prob.status
print "optimal value", prob.value

